version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16
    hostname: expense_analyser_db
    container_name: expense_analyser_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-expense_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-expense_password}
      POSTGRES_DB: ${POSTGRES_DB:-expense_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - expense_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-expense_user} -d ${POSTGRES_DB:-expense_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    hostname: expense_analyser_redis
    container_name: expense_analyser_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - expense_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # FastAPI Backend Service with integrated frontend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        REACT_APP_AUTH0_DOMAIN: ${AUTH0_DOMAIN:-}
        REACT_APP_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-}
        REACT_APP_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-}
    container_name: expense_analyser_api
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-expense_user}:${POSTGRES_PASSWORD:-expense_password}@expense_analyser_db:5432/${POSTGRES_DB:-expense_db}
      REDIS_URL: redis://expense_analyser_redis:6379/0
      API_SECRET_KEY: ${API_SECRET_KEY:-supersecretkey}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-gemini}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-}
    ports:
      - "8000:8000"
    volumes:
      # Mount the uploads directory
      - receipt_uploads:/app/uploads
      # During development, uncomment the following lines to enable hot-reloading
      - ./app:/app/app
    networks:
      - expense_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # Backend test runner service (CI-friendly)
  tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_analyser_tests
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: test
      DATABASE_URL: postgresql://${POSTGRES_USER:-expense_user}:${POSTGRES_PASSWORD:-expense_password}@expense_analyser_db:5432/${POSTGRES_DB:-expense_db}
      REDIS_URL: redis://expense_analyser_redis:6379/0
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-gemini}
    working_dir: /app
    volumes:
      - ./:/app
    networks:
      - expense_network
    command: sh -c "pytest -q"

volumes:
  postgres_data:
    name: expense_analyser_postgres_data
  redis_data:
    name: expense_analyser_redis_data
  receipt_uploads:
    name: expense_analyser_receipt_uploads

networks:
  expense_network:
    name: expense_analyser_network
    driver: bridge
